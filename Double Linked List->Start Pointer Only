#include <iostream>
using namespace std;
int numberValidation(int &number)
{
    bool validInput = false;
    while (!validInput)
    {
        if (cin >> number)
        {
            if (number < 0)
            {
                cout << "Enter positive number: " << endl;
            }
            else
            {
                validInput = true;
            }
        }
        else
        {
            cin.clear();
            while (cin.get() != '\n')
                ;
            cout << "Invalid input. Please enter a valid number." << endl;
        }
    }
    return number;
}
//BCSF22M031_Double Linked List-> One Pointer
class DLL;
class Node
{
    int data;
    Node *prev;
    Node *next;
public:
    Node(int x = 0, Node *p = NULL, Node *n = NULL)
    {
        data = x;
        prev = p;
        next = n;
    }
    friend class DLL;
};
class DLL
{
    Node *first;
public:
    DLL()
    {
        first = NULL;
    }
    ~DLL()
    {
        Node *temp = first;
        Node *next1 = NULL;
        while (temp != NULL)
        {
            next1 = temp->next;
            delete temp;
            temp = next1;
        }
        first = NULL;
    }
    void insert_at_end(int x)
    {
        if (first == NULL)
        {
            first = new Node(x);
        }
        else
        {
            Node *temp = first;
            while (temp->next != NULL)
            {
                temp = temp->next;
            }
            Node *newNode = new Node(x);
            temp->next = newNode;
            newNode->prev = temp;
        }
    }
    void insert_at_start(int x)
    {
        Node *temp = new Node(x);
        temp->next = first;
        if (first != NULL)
        {
            first->prev = temp;
        }
        first = temp;
    }
    Node *Search(int x)
    {
        if (first == NULL)
        {
            cout << "Empty List" << endl;
            return NULL;
        }
        else
        {
            Node *temp = first;
            while (temp != NULL)
            {
                if (temp->data == x)
                {
                    return temp;
                }
                temp = temp->next;
            }
            cout << x << " was not found in the double linked list" << endl;
            return NULL;
        }
    }
    void insert_before(int x, int y)
    {
        Node *temp1 = Search(x);
        if (temp1 == NULL)
        {
            cout << x << " was not found in the double linked list" << endl;
            return;
        }
        Node *newNode = new Node(y);
        if (temp1 == first)
        {
            newNode->next = first;
            first->prev = newNode;
            first = newNode;
        }
        else
        {
            newNode->next = temp1;
            newNode->prev = temp1->prev;
            temp1->prev->next = newNode;
            temp1->prev = newNode;
        }
    }
    void insert_after(int x, int y)
    {
        Node *temp1 = Search(x);
        if (temp1 == NULL)
        {
            cout << x << " was not found in the double linked list" << endl;
            return;
        }
        Node *newNode = new Node(y);
        newNode->next = temp1->next;
        if (temp1->next != NULL)
        {
            temp1->next->prev = newNode;
        }
        temp1->next = newNode;
        newNode->prev = temp1;
    }
    void delete_first(int x)
    {
        Node *temp1 = Search(x);
        if (temp1 == NULL)
        {
            cout << x << " was not found in the double linked list" << endl;
            return;
        }
        if (temp1 == first)
        {
            first = temp1->next;
            if (first != NULL)
            {
                first->prev = NULL;
            }
            delete temp1;
        }
        else
        {
            temp1->prev->next = temp1->next;
            if (temp1->next != NULL)
            {
                temp1->next->prev = temp1->prev;
            }
            delete temp1;
        }
    }
    void delete_kth(int x, int k)
    {
        Node *temp = first;
        int count = 1;
        if (first == NULL)
        {
            cout << "The list is already empty" << endl;
            return;
        }
        Node *temp1 = Search(x);
        if (k == 1 && first == temp1)
        {
            first = temp1->next;
            if (first != NULL)
            {
                first->prev = NULL;
            }
            delete temp1;
            cout << "The " << k << "th instance was found and deleted" << endl;
            return;
        }
        while (temp != NULL)
        {
            if (temp->data == x && count == k)
            {
                temp->prev->next = temp->next;
                if (temp->next != NULL)
                {
                    temp->next->prev = temp->prev;
                }
                delete temp;
                cout << "The " << k << "th instance was found and deleted" << endl;
                return;
            }
            if (temp->data == x && count != k)
            {
                count++;
            }
            temp = temp->next;
        }
        cout << "The " << k << "th instance was not found and hence not deleted" << endl;
    }
    void delete_all(int x)
    {
        if (first == NULL)
        {
            cout << "The list is already empty" << endl;
            return;
        }
        Node *temp1 = Search(x);
        if (temp1 == NULL)
        {
            cout << x << " was not found in the double linked list" << endl;
            return;
        }
        Node *temp = first;
        while (temp != NULL)
        {
            if (temp->data == x)
            {
                if (temp == first)
                {
                    first = temp->next;
                    if (first != NULL)
                    {
                        first->prev = NULL;
                    }
                    delete temp;
                    temp = first;
                }
                else
                {
                    temp->prev->next = temp->next;
                    if (temp->next != NULL)
                    {
                        temp->next->prev = temp->prev;
                    }
                    Node *to_delete = temp;
                    temp = temp->next;
                    delete to_delete;
                }
            }
            else
            {
                temp = temp->next;
            }
        }
    }
    void Print()
    {
        if (first == NULL)
        {
            cout << "List is empty" << endl;
        }
        else
        {
            Node *temp = first;
            while (temp != NULL)
            {
                cout << temp->data << " ";
                temp = temp->next;
            }
            cout << endl;
        }
    }
    void list_reverse()
    {
        Node *current = first;
        Node *temp = NULL;
        while (current != NULL)
        {
            temp = current->prev;
            current->prev = current->next;
            current->next = temp;
            current = current->prev;
        }
        if (temp != NULL)
        {
            first = temp->prev;
        }
    }
    void print_reverse()
    {
        list_reverse();
        Print();
    }
};
int main()
{
    DLL list;
    int choice, value, target, k;
    while (true)
    {
        cout << endl
             << "        Menu" << endl
             << endl;
        cout << "1. Insert at end" << endl;
        cout << "2. Insert at start" << endl;
        cout << "3. Insert before a value" << endl;
        cout << "4. Insert after a value" << endl;
        cout << "5. Delete first occurrence" << endl;
        cout << "6. Delete kth occurrence" << endl;
        cout << "7. Delete all occurrences" << endl;
        cout << "8. Print list" << endl;
        cout << "9. Print reverse" << endl;
        cout << "10. Reverse list" << endl;
        cout << "0. Exit" << endl;
        cout << "Enter your choice: ";
        numberValidation(choice);
        cout << endl;
        switch (choice)
        {
        case 1:
            cout << "Enter value to insert at end: ";
            cin>>value;
            list.insert_at_end(value);
            break;
        case 2:
            cout << "Enter value to insert at start: ";
            cin>>value;
            list.insert_at_start(value);
            break;
        case 3:
            cout << "Enter value to insert before: ";
            cin>>target;
            cout << "Enter value to insert: ";
            cin>>value;
            list.insert_before(target, value);
            break;
        case 4:
            cout << "Enter value to insert after: ";
            cin>>target;
            cout << "Enter value to insert: ";
            cin>>value;
            list.insert_after(target, value);
            break;
        case 5:
            cout << "Enter value to delete first occurrence: ";
            cin>>value;
            list.delete_first(value);
            break;
        case 6:
            cout << "Enter value to delete: ";
            cin>>value;
            cout << "Enter kth occurrence to delete: ";
            numberValidation(k);
            list.delete_kth(value, k);
            break;
        case 7:
            cout << "Enter value to delete all occurrences: ";
            cin>>value;
            list.delete_all(value);
            break;
        case 8:
            list.Print();
            break;
        case 9:
            list.print_reverse();
            break;
        case 10:
            list.list_reverse();
            cout <<"List was reversed."<< endl;
            break;
        case 0:
            cout <<"Exiting..."<< endl;
            return 0;
        default:
            cout <<"Invalid choice, please try again."<< endl;
        }
    }
}
